package main;

import main.Security.ISecurity;
import main.Stores.Product;
import main.Stores.Store;
import main.Users.User;

import javax.naming.NoPermissionException;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class Market {

    /**
     * usersByName is a hashmap that maps username -> User
     * each username is unique in the system
     *
     * connectedUsers is a hashmap that maps token -> connected user
     * once a user disconnects he's removed from this hashmap
     * the token is generated by the system, randomly
     */
    private ConcurrentHashMap<String, User> usersByName; //key=username
    private ConcurrentHashMap<String,User> connectedUsers; //key=userToken, generated randomly by system
    private ConcurrentHashMap<String, Store> stores; //key=store name
    private ISecurity security_controller;
    private AtomicInteger guestCounter;

    public Market(){
        usersByName=new ConcurrentHashMap<>();
        connectedUsers=new ConcurrentHashMap<>();
        stores=new ConcurrentHashMap<>();
        guestCounter=new AtomicInteger(1);
    }

    public boolean addProductToStore(String userToken, String productName, String category, List<String> keyWords, String description, String storeName, int quantity, double price) throws NoPermissionException {
        Pair<User, Store> p=getConnectedUserAndStore(userToken,storeName);
        return p.first.addProductToStore(p.second,productName,category,keyWords,description,quantity,price);
    }

    public boolean updateProductInStore(String userToken, String productName, String category, List<String> keyWords, String description, String storeName, int quantity, double price) throws NoPermissionException {
        Pair<User, Store> p=getConnectedUserAndStore(userToken,storeName);
        return p.first.updateProductToStore(p.second,productName,category,keyWords,description,quantity,price);
    }


    public boolean appointStoreOwner(String userToken, String userToAppoint, String storeName) {
        Pair<User, Store> p=getConnectedUserAndStore(userToken,storeName);
        User user_to_appoint=usersByName.get(userToAppoint);
        if(user_to_appoint==null)
            throw new IllegalArgumentException("The user to appoint doesn't exist!");

        return p.first.appointOwnerToStore(p.second,user_to_appoint);
    }

    private Pair<User,Store> getConnectedUserAndStore(String userToken,String storeName){
        User user= connectedUsers.get(userToken);
        if(user==null)
            throw new IllegalArgumentException("User not logged in");

        Store store = stores.get(storeName);
        if (store == null)
            throw new IllegalArgumentException("No such store");

        return new Pair<>(user,store);
    }

    private class Pair<K,V>{
        private K first;
        private V second;

        private Pair(K first,V second){
            this.first=first;
            this.second=second;
        }
    }
}


