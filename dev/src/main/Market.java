package main;

import main.Security.ISecurity;

import main.Stores.Store;
import main.Users.StorePermission;
import main.Users.User;
import main.utils.Pair;

import javax.naming.NoPermissionException;
import java.util.List;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class Market {

    /**
     * usersByName is a hashmap that maps username -> User
     * each username is unique in the system
     *
     * connectedUsers is a hashmap that maps token -> connected user
     * once a user disconnects he's removed from this hashmap
     * the token is generated by the system, randomly
     */
    private ConcurrentHashMap<String, User> usersByName; //key=username
    private ConcurrentHashMap<String,User> connectedUsers; //key=userToken, generated randomly by system
    private ConcurrentHashMap<String, Store> stores; //key=store name
    private ISecurity security_controller;
    private AtomicInteger guestCounter;

    public Market(){
        usersByName=new ConcurrentHashMap<>();
        connectedUsers=new ConcurrentHashMap<>();
        stores=new ConcurrentHashMap<>();
        guestCounter=new AtomicInteger(1);
    }

    public boolean addProductToStore(String userToken, String productName, String category, List<String> keyWords, String description, String storeName, int quantity, double price) throws NoPermissionException {
        Pair<User, Store> p=getConnectedUserAndStore(userToken,storeName);
        return p.first.addProductToStore(p.second,productName,category,keyWords,description,quantity,price);
    }

    public boolean updateProductInStore(String userToken, String productName, String category, List<String> keyWords, String description, String storeName, int quantity, double price) throws NoPermissionException {
        Pair<User, Store> p=getConnectedUserAndStore(userToken,storeName);
        return p.first.updateProductToStore(p.second,productName,category,keyWords,description,quantity,price);
    }


    public boolean appointStoreOwner(String userToken, String userToAppoint, String storeName) {
        Pair<User, Store> p=getConnectedUserAndStore(userToken,storeName);
        User user_to_appoint=usersByName.get(userToAppoint);
        if(user_to_appoint==null)
            throw new IllegalArgumentException("The user to appoint doesn't exist!");

        return p.first.appointOwnerToStore(p.second,user_to_appoint);
    }



    public boolean removeStoreOwnerAppointment(String userToken, String userAppointed, String storeName) {
        Pair<User, Store> p=getConnectedUserAndStore(userToken,storeName);
        User appointed_user = usersByName.get(userAppointed);
        if(appointed_user==null)
            throw new IllegalArgumentException("The user appointed doesn't exist in the system");

        return p.first.removeOwnerAppointment(p.second,appointed_user);
    }

    private Pair<User,Store> getConnectedUserAndStore(String userToken,String storeName){
        User user= connectedUsers.get(userToken);
        if(user==null)
            throw new IllegalArgumentException("User not logged in");

        Store store = stores.get(storeName);
        if (store == null)
            throw new IllegalArgumentException("No such store");

        return new Pair<>(user,store);
    }

    public boolean appointStoreManager(String userToken, String userToAppoint, String storeName) {
        Pair<User, Store> p=getConnectedUserAndStore(userToken,storeName);
        User user_to_appoint=usersByName.get(userToAppoint);
        if(user_to_appoint==null)
            throw new IllegalArgumentException("The user to appoint doesn't exist!");
        if(p.first==user_to_appoint)
            throw new IllegalArgumentException("Can't appoint yourself!");

        return p.first.appointManagerToStore(p.second,user_to_appoint);
    }

    private boolean allowOrDisallowPermission(String userToken, String managerName, String storeName, StorePermission permission,boolean shouldGrant){
        Pair<User, Store> p=getConnectedUserAndStore(userToken,storeName);
        User manager=usersByName.get(managerName);
        if(manager==null)
            throw new IllegalArgumentException("There's no such manager");

        return p.first.grantOrDeletePermission(manager,p.second,shouldGrant,permission);
    }

    public boolean allowManagerUpdateProducts(String userToken, String managerName, String storeName) {
        return allowOrDisallowPermission(userToken,managerName,storeName,StorePermission.UpdateAddProducts,true);
    }

    public boolean disallowManagerUpdateProducts(String userToken, String managerName, String storeName) {
        return allowOrDisallowPermission(userToken,managerName,storeName,StorePermission.UpdateAddProducts,false);
    }

    public boolean allowManagerViewPurchaseHistory(String userToken, String managerName, String storeName) {
        return allowOrDisallowPermission(userToken,managerName,storeName,StorePermission.ViewStoreHistory,true);
    }

    public boolean disallowManagerViewPurchaseHistory(String userToken, String managerName, String storeName) {
        return allowOrDisallowPermission(userToken,managerName,storeName,StorePermission.ViewStoreHistory,false);
    }

    public boolean allowManagerAnswerAndTakeRequests(String userToken, String managerName, String storeName) {
        return allowOrDisallowPermission(userToken,managerName,storeName,StorePermission.AnswerAndTakeRequests,true);
    }

    public boolean disallowManagerAnswerAndTakeRequests(String userToken, String managerName, String storeName) {
        return allowOrDisallowPermission(userToken,managerName,storeName,StorePermission.AnswerAndTakeRequests,false);
    }

    public boolean removeStoreManager(String userToken, String userAppointed, String storeName) {
        Pair<User, Store> p=getConnectedUserAndStore(userToken,storeName);
        User manager = usersByName.get(userAppointed);
        if(manager==null)
            throw new IllegalArgumentException("The user doesn't exist in the system!");

        return p.first.removeManagerAppointment(p.second,manager);

    }

    public boolean closeStore(String userToken, String storeName) {
        Pair<User, Store> p=getConnectedUserAndStore(userToken,storeName);
        return p.first.closeStore(p.second);

    }

    public boolean reOpenStore(String userToken, String storeName) {
        Pair<User, Store> p=getConnectedUserAndStore(userToken,storeName);
        return p.first.reOpenStore(p.second);
    }
}


